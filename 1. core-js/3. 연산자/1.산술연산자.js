// 나눗셈연산과 나머지
console.log(27 / 5); //원래 자바나 c언어면 결과값이 5로 나옴. 정수의 나눗셈은 소수점 이하의 값을 가질 수 없기 때문!! 이 경우 소수점을 보고 싶으면 소수점까지 보이라는 명령을 해야함.
//js는 정수 개념이 없고 항상 실수 나눗셈이 적용된다. 결과값은 5.4가 됨.

console.log(27 % 5); // 나눗셈의 나머지 값. 2가 결과값으로 나옴. 5로 나눠서 25가 되고 2가 남기 때문!


// 나눗셈 뒤에 숫자가 앞보다 크면 앞이 나머지다.
console.log(5 % 4); // 결과값 1.

console.log(4 % 10); // 결과값 4.
console.log(7 % 8); // 결과값 7.
console.log(0 % 255); // 결과값 0. 몫도 0 나머지도 0
// 0을 나눌 수는 있긴 있다.

// 0 '으로!' 나눌 수 없다.
console.log(200 % 0); //결과값 NaN.
console.log(10 / 0); //결과값 NaN.

var num1 = 8, num2 = 5;
console.log(num1 % num2); //결과값 3.



// 거듭제곱연산자(**) - ES6+
console.log(num2 ** 2);

console.log('====================');


// 증감연산자 (++, --) : 단항연산자
// 1증가, 1감소
var x = 3;
x++; // x를 1 증가시켰다.
++x; // 이것도 똑같이 x를 1 증가시킴.
x--; // 이건 1을 감소시켰다.

console.log(`x: ${x}`);



// 전위 연산(prefix), 후위 연산(postfix)
var a = 10;
var b = a++; // ++이 후위 연산자가 됨. why? a의 뒤에 ++(증감연산자)이 붙어서
// a가 10인게 b에 들어가고, 그 후에 a에 ++이 되어 11이 됨.
// ' = ' 도 연산자임. 대입연산자!

// 그렇다면!!
// ++a;로 한다면?!
// 11, 11이 결과값으로 나옴.

console.log(`a: ${a}, b: ${b}`);

var c = 5;
var d = ++c * 2; //삼항 연산자 
// 팁!! ' = ' 이라는 후위연산을 빼고는 제일 느린 연산 순서를 가짐.

console.log(`c: ${c}, d: ${d}`);


// 이 연산의 결과로 a, b, c, d, e의 값을 구하시오.
var e = --b + c++ * d;
// 이 경우, 먼저 시작을 확인해보자
console.log(a, b, c, d, e);

// 이 결과 값은 (쌤 화면, 나랑 좀 다름 위에 수식이.) a: 11, b: 11, c: 6, d: 10, e: ?


// 내 예상 답 = 틀림.
// a = 11, b = 9, c = 6, d= 6, e= 39
//다시보자 a=11, b=9, c=7, d=12, e= 81

console.log(`a: ${a}, b: ${b}, c: ${c}, d: ${d}, e: ${e}`);


